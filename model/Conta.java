package model;import exception.LimiteMaxException;import exception.MultiploException;import exception.SaldoInsuficienteException;import java.text.DecimalFormat;import java.text.DecimalFormatSymbols;import java.util.Locale;public abstract class Conta {    private int numeroAgencia;    private int numeroConta;    private String tipoConta;    protected double saldo;    private String nomeTitular;    private static int quantidadeContas;    public static final DecimalFormatSymbols SYMBOLS = new DecimalFormatSymbols(Locale.US);    public static final DecimalFormat DF = new DecimalFormat("00.00", SYMBOLS);    public Conta(int numeroAgencia, int numeroConta) {        this.numeroAgencia = numeroAgencia;        this.numeroConta = numeroConta;        quantidadeContas++;        //System.out.println(this.getQuantidadeContas());    }    public abstract void depositar(double valor);    public void sacar(double valor) throws SaldoInsuficienteException, LimiteMaxException, MultiploException {        if(this.saldo < valor){            throw new SaldoInsuficienteException("--- "+ this.getNomeTitular() + " ---\nSaldo Insuficiente para realizar essa operação! \nSeu saldo atual: R$ " + DF.format(this.saldo));            //System.out.println("--- "+ this.getNomeTitular() + " ---\nSeu saldo é insuficiente para realizar essa operação. \nSaldo atual: R$ " + DF.format(this.getSaldo()));        }        if (valor > 300){            throw new LimiteMaxException("--- "+ this.getNomeTitular() + " ---\nValor máximo de saque (R$ 300,00) excedido, tente com um valor menor!");        }        if(valor % 20 == 0){            throw new MultiploException("--- "+ this.getNomeTitular() + " ---\nValores divisiveis por 20 não são permitidos, infelizmente não recebemos cédulas de 20 reais.");        }            this.saldo -= valor;            System.out.println("--- "+ this.getNomeTitular() + " ---\nOperação realizada com sucesso. \nSaldo atual: R$ " + DF.format(this.getSaldo()));        System.out.println();    }    public void transferir(Conta destinatario, double valor) throws SaldoInsuficienteException, LimiteMaxException, MultiploException{        this.sacar(valor);        destinatario.setSaldo(destinatario.saldo + valor);    }    public void consultar() {        System.out.println("////////////////////////////////");        System.out.println("Nome do Titular: " + this.nomeTitular);        System.out.println("Número da Agência: " + this.numeroAgencia);        System.out.println("Número da Conta: " + this.numeroConta);        System.out.println("Tipo da Conta: " + this.tipoConta);        System.out.println("Saldo da Conta: R$ " + DF.format(this.getSaldo()));        System.out.println("///////////////////////////////");        System.out.println();    }    public int getNumeroAgencia() {        return numeroAgencia;    }    public void setNumeroAgencia(int numeroAgencia) {        this.numeroAgencia = numeroAgencia;    }    public int getNumeroConta() {        return numeroConta;    }    public void setNumeroConta(int numeroConta) {        this.numeroConta = numeroConta;    }    public String getTipoConta() {        return tipoConta;    }    public void setTipoConta(String tipoConta) {        this.tipoConta = tipoConta;    }    public String getNomeTitular() {        return nomeTitular;    }    public void setNomeTitular(String nomeTitular) {        this.nomeTitular = nomeTitular;    }    public static int getQuantidadeContas() {        return quantidadeContas;    }    public static void setQuantidadeContas(int quantidadeContas) {        Conta.quantidadeContas = quantidadeContas;    }    public double getSaldo() {        return saldo;    }    public void setSaldo(double saldo) {        this.saldo = saldo;    }}